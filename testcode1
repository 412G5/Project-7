### Project 7 by Harley and Lauren
### this code will test our previous API

import json
import requests


base_url = "http://127.0.0.1:8000"


def log_comparison(expected, actual, message):
    print(f"Expected: {expected}")
    print(f"Actual: {actual}")
    assert expected == actual, message


# a function to test the /md5/<string> endpoint
def test_md5_endpoint():
    test_cases = [
        ("Hello World", "b10a8db164e0754105b7a99be72e3fe5"),
        ("%20", "7215ee9c7d9dc229d2921a40e899ec5f"),
        ("Test String", "bd08ba3c982eaad768602536fb8e1184"),
    ]

    for test_string, expected_md5_hash in test_cases:
        url = f"{base_url}/md5/{test_string}"
        response = requests.get(url)
        if response.status_code != 200:
            print(f"MD5 endpoint returned a non-200 status code for input: {test_string}")
            continue  # skip to the next test case

        actual_response = json.loads(response.text)
        actual_md5_hash = actual_response['output']

        if actual_md5_hash == expected_md5_hash:
            print(f"MD5 test case for {test_string}: 0")
        else:
            print(f"MD5 test case for {test_string}: 1")
            log_comparison(expected_md5_hash, actual_md5_hash, "MD5 hash does not match")


# a function to test the /factorial/<int> endpoint
def test_factorial_endpoint():
    test_cases = [
        (5, 120),
        (10, 3628800),
        (0, 1),
        (-5, "Invalid input."),
        ("abc", "Invalid input."),
    ]

    for test_int, expected_factorial in test_cases:
        url = f"{base_url}/factorial/{test_int}"
        response = requests.get(url)

        response_data = response.json()  
        actual_factorial = response_data["output"]

        if actual_factorial == expected_factorial:
            print(f"Factorial test case for {test_int}: 0")
        else:
            print(f"Factorial test case for {test_int}: 1")


# a function to test the /fibonacci/<int> endpoint
def test_fibonacci_endpoint():
    test_cases = [
        (8, [0, 1, 1, 2, 3, 5, 8]),
        (35, [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]),
        (0, [0]),
        (-5, "Invalid input."),  
        ("xyz", "Invalid input."),  
    ]

    for test_int, expected_fibonacci_sequence in test_cases:
        url = f"{base_url}/fibonacci/{test_int}"
        response = requests.get(url)

        response_data = response.json()
        actual_fibonacci_sequence = response_data["output"]

        if actual_fibonacci_sequence == expected_fibonacci_sequence:
            print(f"Fibonacci test case for {test_int}: 0")
        else:
            print(f"Factorial test case for {test_int}: 1")


# a function to test the /is-prime/<int> endpoint
def test_is_prime_endpoint():
    test_cases = [
        (17, True),
        (10, False),
        (-5, "Invalid input."),
        (0, "Invalid input."),
        ("abc", "Invalid input."),  
    ]

    for test_prime, expected_result in test_cases:
        url = f"{base_url}/is-prime/{test_prime}"
        response = requests.get(url)

        response_data = response.json()
        actual_prime = response_data["output"]

        if actual_prime == expected_prime:
            print(f"Prime test case for {test_prime}: 0")
        else:
            print(f"Prime test case for {test_prime}: 1")


#  a function to test the /slack-alert/<string> endpoint
def test_slack_alert_endpoint():
    test_message = "Test message"
    url = f"{base_url}/slack-alert/{test_message}"
    response = requests.get(url)

    actual_result = response.json()["output"]

    if response.status_code == 200:
        print(f"Slack alert test case for {test_message}: 0") 
    else:
        print(f"Slack alert test case for {test_message}: 1")
    

# run all test functions
def run_tests():
    test_md5_endpoint()
    test_factorial_endpoint()
    test_fibonacci_endpoint()
    test_is_prime_endpoint()
    test_slack_alert_endpoint()
    print("All tests completed")

if __name__ == "__main__":
    run_tests()
